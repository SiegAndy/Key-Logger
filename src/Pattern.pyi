from typing import Callable, Dict, List, Tuple, overload

class Pattern:
    @property
    def start_counter(self) -> int: ...
    @property
    def stop_counter(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def stop_time_interval(self) -> Tuple[int, int, int]: ...
    @overload
    def __init__(self, stop_counter: int) -> None: ...
    @overload
    def __init__(self, stop_counter: int, start_counter: int, step: int) -> None: ...
    @overload
    def __init__(self, *, stop_time_interval: Tuple[int, int, int]) -> None: ...
    def create_pattern(self, commands: List[str]) -> List[Callable]: ...
    def execute(self, hwnd: int) -> None: ...
    def reset(self) -> None: ...
    @staticmethod
    def get_vk_mapping() -> Dict: ...
