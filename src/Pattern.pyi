from typing import Any, Callable, Dict, List, Optional, Tuple, overload
from uuid import UUID

class stringifyable:
    def stringify(self): ...
    def unstringify(self, load_string: str): ...

class KeyCombination(stringifyable):
    def __init__(self, start_key: str = "f10", stop_key: str = "f11") -> None: ...
    @property
    def start_key(self) -> str: ...
    @start_key.setter
    def start_key(self, new_start_key: str) -> str: ...
    @property
    def stop_key(self) -> str: ...
    @stop_key.setter
    def stop_key(self, new_stop_key: str) -> str: ...

class Repeat(stringifyable):
    @property
    def start_counter(self) -> int: ...
    @property
    def stop_counter(self) -> int: ...
    @property
    def step(self) -> int: ...
    @property
    def stop_time_interval(self) -> Tuple[int, int, int]: ...
    @overload
    def __init__(
        self, stop_counter: int, start_key: str = "f10", stop_key: str = "f11"
    ) -> None: ...
    @overload
    def __init__(
        self,
        stop_counter: int,
        start_counter: int = 0,
        step: int = 1,
        start_key: str = "f10",
        stop_key: str = "f11",
    ) -> None: ...
    @overload
    def __init__(
        self,
        sec: float,
        min: int = 0,
        hr: int = 0,
        start_key: str = "f10",
        stop_key: str = "f11",
    ) -> None: ...

class Pattern(stringifyable):
    def __init__(
        self, name: str, repeat: Repeat = None, key_comb: KeyCombination = None
    ) -> None: ...
    def create_pattern(self, commands: List[str]) -> List[Callable]: ...
    def execute(self, hwnd: int) -> None: ...
    def reset(self) -> None: ...
    def toDict(self) -> Dict[Any, Dict]: ...
    @classmethod
    def fromDict(cls, input_dict: Dict[str, Dict]): ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, new_name: str) -> str: ...
    @property
    def uuid(self) -> UUID: ...
    @uuid.setter
    def uuid(self, new_uuid: UUID) -> UUID: ...
    @property
    def repeat(self) -> Repeat: ...
    @property
    def key_comb(self) -> KeyCombination: ...
